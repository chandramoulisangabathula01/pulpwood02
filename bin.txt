"use client";

import { cva, type VariantProps } from "class-variance-authority";

import {

motion,

MotionProps,

MotionValue,

useMotionValue,

useSpring,

useTransform,

} from "motion/react";

import React, { PropsWithChildren, useRef } from "react";

import { cn } from "@/lib/utils";

export interface DockProps extends VariantProps<typeof dockVariants> {

className?: string;

iconSize?: number;

iconMagnification?: number;

iconDistance?: number;

direction?: "top" | "middle" | "bottom";

children: React.ReactNode;

}

const DEFAULT_SIZE = 40;

const DEFAULT_MAGNIFICATION = 60;

const DEFAULT_DISTANCE = 140;

const dockVariants = cva(

"supports-backdrop-blur:bg-white/10 supports-backdrop-blur:dark:bg-black/10 mx-auto mt-8 flex h-[58px] w-max items-center justify-center gap-2 rounded-2xl border p-2 backdrop-blur-md",

);

const Dock = React.forwardRef<HTMLDivElement, DockProps>(

(

{

className,

children,

iconSize = DEFAULT_SIZE,

iconMagnification = DEFAULT_MAGNIFICATION,

iconDistance = DEFAULT_DISTANCE,

direction = "middle",

...props

},

ref,

) => {

const mouseX = useMotionValue(Infinity);

const renderChildren = () => {

return React.Children.map(children, (child) => {

if (React.isValidElement(child) && child.type === DockIcon) {

return React.cloneElement(child, {

...child.props,

mouseX: mouseX,

size: iconSize,

magnification: iconMagnification,

distance: iconDistance,

});

}

return child;

});

};

return (

<motion.div

ref={ref}

onMouseMove={(e) => mouseX.set(e.pageX)}

onMouseLeave={() => mouseX.set(Infinity)}

{...props}

className={cn(dockVariants({ className }), {

"items-start": direction === "top",

"items-center": direction === "middle",

"items-end": direction === "bottom",

})}

>

{renderChildren()}

</motion.div>

);

},

);

Dock.displayName = "Dock";

export interface DockIconProps

extends Omit<MotionProps & React.HTMLAttributes<HTMLDivElement>, "children"> {

size?: number;

magnification?: number;

distance?: number;

mouseX?: MotionValue<number>;

className?: string;

children?: React.ReactNode;

props?: PropsWithChildren;

}

const DockIcon = ({

size = DEFAULT_SIZE,

magnification = DEFAULT_MAGNIFICATION,

distance = DEFAULT_DISTANCE,

mouseX,

className,

children,

...props

}: DockIconProps) => {

const ref = useRef<HTMLDivElement>(null);

const padding = Math.max(6, size * 0.2);

const defaultMouseX = useMotionValue(Infinity);

const distanceCalc = useTransform(mouseX ?? defaultMouseX, (val: number) => {

const bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 };

return val - bounds.x - bounds.width / 2;

});

const sizeTransform = useTransform(

distanceCalc,

[-distance, 0, distance],

[size, magnification, size],

);

const scaleSize = useSpring(sizeTransform, {

mass: 0.1,

stiffness: 150,

damping: 12,

});

return (

<motion.div

ref={ref}

style={{ width: scaleSize, height: scaleSize, padding }}

className={cn(

"flex aspect-square cursor-pointer items-center justify-center rounded-full",

className,

)}

{...props}

>

{children}

</motion.div>

);

};

DockIcon.displayName = "DockIcon";

export { Dock, DockIcon, dockVariants };

example one :

"use client";

import { CalendarIcon, HomeIcon, MailIcon, PencilIcon } from "lucide-react";

import Link from "next/link";

import React from "react";

import { ModeToggle } from "@/components/mode-toggle";

import { buttonVariants } from "@/components/ui/button";

import { Separator } from "@/components/ui/separator";

import {

Tooltip,

TooltipContent,

TooltipProvider,

TooltipTrigger,

} from "@/components/ui/tooltip";

import { cn } from "@/lib/utils";

import { Dock, DockIcon } from "@/registry/magicui/dock";

export type IconProps = React.HTMLAttributes<SVGElement>;

const Icons = {

calendar: (props: IconProps) => <CalendarIcon {...props} />,

email: (props: IconProps) => <MailIcon {...props} />,

linkedin: (props: IconProps) => (

<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" {...props}>

<title>LinkedIn</title>

<path

fill="currentColor"

d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"

/>

</svg>

),

x: (props: IconProps) => (

<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" {...props}>

<title>X</title>

<path

fill="currentColor"

d="M18.901 1.153h3.68l-8.04 9.19L24 22.846h-7.406l-5.8-7.584-6.638 7.584H.474l8.6-9.83L0 1.154h7.594l5.243 6.932ZM17.61 20.644h2.039L6.486 3.24H4.298Z"

/>

</svg>

),

youtube: (props: IconProps) => (

<svg

width="32px"

height="32px"

viewBox="0 0 32 32"

fill="currentColor"

xmlns="http://www.w3.org/2000/svg"

{...props}

>

<title>youtube</title>

<path d="M29.41,9.26a3.5,3.5,0,0,0-2.47-2.47C24.76,6.2,16,6.2,16,6.2s-8.76,0-10.94.59A3.5,3.5,0,0,0,2.59,9.26,36.13,36.13,0,0,0,2,1